/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package davidmatos.assignment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author david
 */
public class EditFacilities extends javax.swing.JFrame {

    /**
     * Creates new form Login
     */
    public EditFacilities() {
        initComponents();
        hideComboBoxes();
    }

    Connection con;
    PreparedStatement pst;
    ResultSet rs;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        btnEditUser = new javax.swing.JButton();
        btnDeleteUser = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtFacilityName = new javax.swing.JTextField();
        txtAddress = new javax.swing.JTextField();
        txtSearchBar = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        cbxStudentFaciltyType = new javax.swing.JComboBox<>();
        cbxJobSeekerFaciltyType = new javax.swing.JComboBox<>();
        cbxTourismFaciltyType = new javax.swing.JComboBox<>();
        cbxBusinessFaciltyType = new javax.swing.JComboBox<>();
        cbxGeneralFaciltyType = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblFacilities = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        cbxSelectFacilities = new javax.swing.JComboBox<>();
        btnView = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnEditUser.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnEditUser.setText("Edit User");
        btnEditUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditUserActionPerformed(evt);
            }
        });
        jPanel2.add(btnEditUser, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 170, 122, 51));

        btnDeleteUser.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnDeleteUser.setText("Delete User");
        btnDeleteUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteUserActionPerformed(evt);
            }
        });
        jPanel2.add(btnDeleteUser, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 170, 122, 51));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setText("Address");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 130, -1, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel6.setText("Facility Name");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 100, -1, -1));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel5.setText("Facility Type");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 60, -1, -1));
        jPanel2.add(txtFacilityName, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 100, 145, -1));
        jPanel2.add(txtAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 130, 145, -1));

        txtSearchBar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchBarKeyReleased(evt);
            }
        });
        jPanel2.add(txtSearchBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 30, 145, -1));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel9.setText("Search Facility");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 30, 120, -1));

        cbxStudentFaciltyType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "College", "University", "Library", "Gym" }));
        jPanel2.add(cbxStudentFaciltyType, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 60, 145, -1));

        cbxJobSeekerFaciltyType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Job Center", "Finance", "Construction", "Emergency Service", "Healthcare", "IT", "Law", "Sport", "Media", "Teaching", "Computer Science" }));
        jPanel2.add(cbxJobSeekerFaciltyType, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 60, 145, -1));

        cbxTourismFaciltyType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hotel", "Restaurant", "Attraction", "Bank", "Cinema" }));
        jPanel2.add(cbxTourismFaciltyType, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 60, 145, -1));

        cbxBusinessFaciltyType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Business Center", "Office Building", "Conference Room" }));
        jPanel2.add(cbxBusinessFaciltyType, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 60, 145, -1));

        cbxGeneralFaciltyType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Healthcare", "Emergency Services", "Transportation Services", "Rental Facilities" }));
        jPanel2.add(cbxGeneralFaciltyType, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 60, 145, -1));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 985, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tblFacilities.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "facilityType", "facilityName", "address"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblFacilities.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblFacilitiesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblFacilities);

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel10.setText("Select which facilities you");

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel11.setText("would like to view to update:");

        cbxSelectFacilities.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        cbxSelectFacilities.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Students", "Job Seeker", "Tourism", "Business", "General" }));

        btnView.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setText("Edit Facilities");

        btnBack.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel10))))
                        .addGap(44, 44, 44)
                        .addComponent(cbxSelectFacilities, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnView, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(428, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel11)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbxSelectFacilities, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnView, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(85, 85, 85)
                .addComponent(btnBack)
                .addGap(21, 21, 21))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(150, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(149, Short.MAX_VALUE)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public void hideComboBoxes() {
        cbxStudentFaciltyType.setVisible(false);
        cbxJobSeekerFaciltyType.setVisible(false);
        cbxTourismFaciltyType.setVisible(false);
        cbxBusinessFaciltyType.setVisible(false);
        cbxGeneralFaciltyType.setVisible(false);
    }

    private void tblFacilitiesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblFacilitiesMouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tblFacilities.getModel();
        int selectedIndex = tblFacilities.getSelectedRow();
        String typeValue;
        int typeIndex = 0;

        String facilityType = cbxSelectFacilities.getSelectedItem().toString();
        switch (facilityType) {
            case "Students" -> {
                txtFacilityName.setText(model.getValueAt(selectedIndex, 2).toString());
                txtAddress.setText(model.getValueAt(selectedIndex, 3).toString());
                typeValue = model.getValueAt(selectedIndex, 1).toString();
                switch (typeValue) {
                    case "College":
                        typeIndex = 0;
                        break;
                    case "University":
                        typeIndex = 1;
                        break;
                    case "Library":
                        typeIndex = 2;
                        break;
                    case "Gym":
                        typeIndex = 3;
                        break;
                }
                cbxStudentFaciltyType.setSelectedIndex(typeIndex);
            }
            case "Job Seeker" -> {
                txtFacilityName.setText(model.getValueAt(selectedIndex, 2).toString());
                txtAddress.setText(model.getValueAt(selectedIndex, 3).toString());
                typeValue = model.getValueAt(selectedIndex, 1).toString();
                switch (typeValue) {
                    case "Job Center":
                        typeIndex = 0;
                        break;
                    case "Finance":
                        typeIndex = 1;
                        break;
                    case "Construction":
                        typeIndex = 2;
                        break;
                    case "Emergency Service":
                        typeIndex = 3;
                        break;
                    case "Healthcare":
                        typeIndex = 4;
                        break;
                    case "IT":
                        typeIndex = 5;
                        break;
                    case "Law":
                        typeIndex = 6;
                        break;
                    case "Sport":
                        typeIndex = 7;
                        break;
                    case "Media":
                        typeIndex = 8;
                        break;
                    case "Teaching":
                        typeIndex = 9;
                        break;
                    case "Computer Science":
                        typeIndex = 10;
                        break;
                }
                cbxJobSeekerFaciltyType.setSelectedIndex(typeIndex);
            }
            case "Tourism" -> {
                txtFacilityName.setText(model.getValueAt(selectedIndex, 2).toString());
                txtAddress.setText(model.getValueAt(selectedIndex, 3).toString());
                typeValue = model.getValueAt(selectedIndex, 1).toString();
                switch (typeValue) {
                    case "Hotel":
                        typeIndex = 0;
                        break;
                    case "Restaurant":
                        typeIndex = 1;
                        break;
                    case "Attraction":
                        typeIndex = 2;
                        break;
                    case "Bank":
                        typeIndex = 3;
                        break;
                    case "Cinema":
                        typeIndex = 4;
                        break;
                }
                cbxTourismFaciltyType.setSelectedIndex(typeIndex);
            }
            case "Business" -> {
                txtFacilityName.setText(model.getValueAt(selectedIndex, 2).toString());
                txtAddress.setText(model.getValueAt(selectedIndex, 3).toString());
                typeValue = model.getValueAt(selectedIndex, 1).toString();
                switch (typeValue) {
                    case "Business Center":
                        typeIndex = 0;
                        break;
                    case "Office Building":
                        typeIndex = 1;
                        break;
                    case "Conference Room":
                        typeIndex = 2;
                        break;
                }
                cbxBusinessFaciltyType.setSelectedIndex(typeIndex);
            }
            case "General" -> {
                txtFacilityName.setText(model.getValueAt(selectedIndex, 2).toString());
                txtAddress.setText(model.getValueAt(selectedIndex, 3).toString());
                typeValue = model.getValueAt(selectedIndex, 1).toString();
                switch (typeValue) {
                    case "Healthcare":
                        typeIndex = 0;
                        break;
                    case "Emergency Services":
                        typeIndex = 1;
                        break;
                    case "Transportation Services":
                        typeIndex = 2;
                        break;
                    case "Rental Facilities":
                        typeIndex = 3;
                        break;
                }
                cbxGeneralFaciltyType.setSelectedIndex(typeIndex);
            }
        }
    }//GEN-LAST:event_tblFacilitiesMouseClicked

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        String facilityType = cbxSelectFacilities.getSelectedItem().toString();
        hideComboBoxes();
        switch (facilityType) {
            case "Students" -> {
                cbxStudentFaciltyType.setVisible(true);
                updateTableStudents();
            }
            case "Job Seeker" -> {
                cbxJobSeekerFaciltyType.setVisible(true);
                updateTableJobSeeker();
            }
            case "Tourism" -> {
                cbxTourismFaciltyType.setVisible(true);
                updateTableTourism();
            }
            case "Business" -> {
                cbxBusinessFaciltyType.setVisible(true);
                updateTableBusiness();
            }
            case "General" -> {
                cbxGeneralFaciltyType.setVisible(true);
                updateTableGeneral();
            }
        }
    }//GEN-LAST:event_btnViewActionPerformed

    private void txtSearchBarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchBarKeyReleased
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tblFacilities.getModel();
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(model);
        tblFacilities.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(txtSearchBar.getText().trim()));
    }//GEN-LAST:event_txtSearchBarKeyReleased

    private void btnDeleteUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteUserActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tblFacilities.getModel();
        int selectedIndex = tblFacilities.getSelectedRow();

        int ID = Integer.parseInt(model.getValueAt(selectedIndex, 0).toString());
        int dialogResult = JOptionPane.showConfirmDialog(null, "Do you want to delete this record?", "Warning", JOptionPane.YES_NO_OPTION);

        String facilityType = cbxSelectFacilities.getSelectedItem().toString();
        switch (facilityType) {
            case "Students" -> {
                if (dialogResult == JOptionPane.YES_OPTION) {
                    try {
                        Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");
                        con = DriverManager.getConnection("jdbc:ucanaccess://C:/Users/david/OneDrive/Documents/CityPlanner.accdb");

                        pst = con.prepareStatement("DELETE FROM Students WHERE ID=?");
                        pst.setInt(1, ID);
                        pst.executeUpdate();
                        JOptionPane.showMessageDialog(this, "Record Deleted");

                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(EditFacilities.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (SQLException ex) {
                        Logger.getLogger(EditFacilities.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                updateTableStudents();
            }
            case "Job Seeker" -> {
                if (dialogResult == JOptionPane.YES_OPTION) {
                    try {
                        Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");
                        con = DriverManager.getConnection("jdbc:ucanaccess://C:/Users/david/OneDrive/Documents/CityPlanner.accdb");

                        pst = con.prepareStatement("DELETE FROM JobSeeker WHERE ID=?");
                        pst.setInt(1, ID);
                        pst.executeUpdate();
                        JOptionPane.showMessageDialog(this, "Record Deleted");

                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(EditFacilities.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (SQLException ex) {
                        Logger.getLogger(EditFacilities.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                updateTableJobSeeker();
            }
            case "Tourism" -> {
                if (dialogResult == JOptionPane.YES_OPTION) {
                    try {
                        Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");
                        con = DriverManager.getConnection("jdbc:ucanaccess://C:/Users/david/OneDrive/Documents/CityPlanner.accdb");

                        pst = con.prepareStatement("DELETE FROM Tourism WHERE ID=?");
                        pst.setInt(1, ID);
                        pst.executeUpdate();
                        JOptionPane.showMessageDialog(this, "Record Deleted");

                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(EditFacilities.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (SQLException ex) {
                        Logger.getLogger(EditFacilities.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                updateTableTourism();
            }
            case "Business" -> {
                if (dialogResult == JOptionPane.YES_OPTION) {
                    try {
                        Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");
                        con = DriverManager.getConnection("jdbc:ucanaccess://C:/Users/david/OneDrive/Documents/CityPlanner.accdb");

                        pst = con.prepareStatement("DELETE FROM Business WHERE ID=?");
                        pst.setInt(1, ID);
                        pst.executeUpdate();
                        JOptionPane.showMessageDialog(this, "Record Deleted");

                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(EditFacilities.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (SQLException ex) {
                        Logger.getLogger(EditFacilities.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                updateTableBusiness();
            }
            case "General" -> {
                if (dialogResult == JOptionPane.YES_OPTION) {
                    try {
                        Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");
                        con = DriverManager.getConnection("jdbc:ucanaccess://C:/Users/david/OneDrive/Documents/CityPlanner.accdb");

                        pst = con.prepareStatement("DELETE FROM General WHERE ID=?");
                        pst.setInt(1, ID);
                        pst.executeUpdate();
                        JOptionPane.showMessageDialog(this, "Record Deleted");

                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(EditFacilities.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (SQLException ex) {
                        Logger.getLogger(EditFacilities.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                updateTableGeneral();
            }
        }
    }//GEN-LAST:event_btnDeleteUserActionPerformed

    private void btnEditUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditUserActionPerformed
        // TODO add your handling code here:

        DefaultTableModel model = (DefaultTableModel) tblFacilities.getModel();
        int selectedIndex = tblFacilities.getSelectedRow();

        int ID = Integer.parseInt(model.getValueAt(selectedIndex, 0).toString());

        String facilityName, address;
        facilityName = txtFacilityName.getText();
        address = txtAddress.getText();

        String facilityType = cbxSelectFacilities.getSelectedItem().toString();
        switch (facilityType) {
            case "Students":
                String studentFacilityType = cbxStudentFaciltyType.getSelectedItem().toString();
                try {
                    Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");
                    con = DriverManager.getConnection("jdbc:ucanaccess://C:/Users/david/OneDrive/Documents/CityPlanner.accdb");

                    pst = con.prepareStatement("UPDATE Students SET facilityType=?,facilityName=?,address=? WHERE ID=?");
                    pst.setString(1, studentFacilityType);
                    pst.setString(2, facilityName);
                    pst.setString(3, address);
                    pst.setInt(4, ID);
                    pst.executeUpdate();
                    JOptionPane.showMessageDialog(this, "record updated");
                    updateTableStudents();

                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(EditFacilities.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(EditFacilities.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, ex);
                }
                break;
            case "Job Seeker":
                String jobSeekerFacilityType = cbxJobSeekerFaciltyType.getSelectedItem().toString();
                try {
                    Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");
                    con = DriverManager.getConnection("jdbc:ucanaccess://C:/Users/david/OneDrive/Documents/CityPlanner.accdb");

                    pst = con.prepareStatement("UPDATE JobSeeker SET facilityType=?,facilityName=?,address=? WHERE ID=?");
                    pst.setString(1, jobSeekerFacilityType);
                    pst.setString(2, facilityName);
                    pst.setString(3, address);
                    pst.setInt(4, ID);
                    pst.executeUpdate();
                    JOptionPane.showMessageDialog(this, "record updated");
                    updateTableJobSeeker();

                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(EditFacilities.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(EditFacilities.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, ex);
                }
                break;
            case "Tourism":
                String tourismFacilityType = cbxTourismFaciltyType.getSelectedItem().toString();
                try {
                    Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");
                    con = DriverManager.getConnection("jdbc:ucanaccess://C:/Users/david/OneDrive/Documents/CityPlanner.accdb");

                    pst = con.prepareStatement("UPDATE Tourism SET facilityType=?,facilityName=?,address=? WHERE ID=?");
                    pst.setString(1, tourismFacilityType);
                    pst.setString(2, facilityName);
                    pst.setString(3, address);
                    pst.setInt(4, ID);
                    pst.executeUpdate();
                    JOptionPane.showMessageDialog(this, "record updated");
                    updateTableTourism();
                    
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(EditFacilities.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(EditFacilities.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, ex);
                }
                break;
            case "Business":
                String businessFacilityType = cbxBusinessFaciltyType.getSelectedItem().toString();
                try {
                    Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");
                    con = DriverManager.getConnection("jdbc:ucanaccess://C:/Users/david/OneDrive/Documents/CityPlanner.accdb");

                    pst = con.prepareStatement("UPDATE Business SET facilityType=?,facilityName=?,address=? WHERE ID=?");
                    pst.setString(1, businessFacilityType);
                    pst.setString(2, facilityName);
                    pst.setString(3, address);
                    pst.setInt(4, ID);
                    pst.executeUpdate();
                    JOptionPane.showMessageDialog(this, "record updated");
                    updateTableBusiness();


                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(EditFacilities.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(EditFacilities.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, ex);
                }
                break;
            case "General":
                String generalFacilityType = cbxGeneralFaciltyType.getSelectedItem().toString();
                try {
                    Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");
                    con = DriverManager.getConnection("jdbc:ucanaccess://C:/Users/david/OneDrive/Documents/CityPlanner.accdb");

                    pst = con.prepareStatement("UPDATE General SET facilityType=?,facilityName=?,address=? WHERE ID=?");
                    pst.setString(1, generalFacilityType);
                    pst.setString(2, facilityName);
                    pst.setString(3, address);
                    pst.setInt(4, ID);
                    pst.executeUpdate();
                    JOptionPane.showMessageDialog(this, "record updated");
                    updateTableGeneral();


                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(EditFacilities.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(EditFacilities.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, ex);
                }
                break;
        }
    }//GEN-LAST:event_btnEditUserActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        AdminHome homeScreen = new AdminHome();
        homeScreen.setVisible(true);
    }//GEN-LAST:event_btnBackActionPerformed

    public void updateTableStudents() {
        try {
            int c;
            Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");
            con = DriverManager.getConnection("jdbc:ucanaccess://C:/Users/david/OneDrive/Documents/CityPlanner.accdb");
            pst = con.prepareStatement("SELECT * FROM Students");
            rs = pst.executeQuery();

            ResultSetMetaData rsd = rs.getMetaData();
            c = rsd.getColumnCount();
            DefaultTableModel dft = (DefaultTableModel) tblFacilities.getModel();
            dft.setRowCount(0);

            while (rs.next()) {
                Vector vector = new Vector();
                for (int i = 1; i <= c; i++) {
                    vector.add(rs.getString("ID"));
                    vector.add(rs.getString("facilityType"));
                    vector.add(rs.getString("facilityName"));
                    vector.add(rs.getString("address"));
                }
                dft.addRow(vector);

            }

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(EditFacilities.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(EditFacilities.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void updateTableJobSeeker() {
        try {
            int c;
            Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");
            con = DriverManager.getConnection("jdbc:ucanaccess://C:/Users/david/OneDrive/Documents/CityPlanner.accdb");
            pst = con.prepareStatement("SELECT * FROM JobSeeker");
            rs = pst.executeQuery();

            ResultSetMetaData rsd = rs.getMetaData();
            c = rsd.getColumnCount();
            DefaultTableModel dft = (DefaultTableModel) tblFacilities.getModel();
            dft.setRowCount(0);

            while (rs.next()) {
                Vector vector = new Vector();
                for (int i = 1; i <= c; i++) {
                    vector.add(rs.getString("ID"));
                    vector.add(rs.getString("facilityType"));
                    vector.add(rs.getString("facilityName"));
                    vector.add(rs.getString("address"));
                }
                dft.addRow(vector);

            }

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(EditFacilities.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(EditFacilities.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void updateTableTourism() {
        try {
            int c;
            Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");
            con = DriverManager.getConnection("jdbc:ucanaccess://C:/Users/david/OneDrive/Documents/CityPlanner.accdb");
            pst = con.prepareStatement("SELECT * FROM Tourism");
            rs = pst.executeQuery();

            ResultSetMetaData rsd = rs.getMetaData();
            c = rsd.getColumnCount();
            DefaultTableModel dft = (DefaultTableModel) tblFacilities.getModel();
            dft.setRowCount(0);

            while (rs.next()) {
                Vector vector = new Vector();
                for (int i = 1; i <= c; i++) {
                    vector.add(rs.getString("ID"));
                    vector.add(rs.getString("facilityType"));
                    vector.add(rs.getString("facilityName"));
                    vector.add(rs.getString("address"));
                }
                dft.addRow(vector);

            }

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(EditFacilities.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(EditFacilities.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void updateTableBusiness() {
        try {
            int c;
            Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");
            con = DriverManager.getConnection("jdbc:ucanaccess://C:/Users/david/OneDrive/Documents/CityPlanner.accdb");
            pst = con.prepareStatement("SELECT * FROM Business");
            rs = pst.executeQuery();

            ResultSetMetaData rsd = rs.getMetaData();
            c = rsd.getColumnCount();
            DefaultTableModel dft = (DefaultTableModel) tblFacilities.getModel();
            dft.setRowCount(0);

            while (rs.next()) {
                Vector vector = new Vector();
                for (int i = 1; i <= c; i++) {
                    vector.add(rs.getString("ID"));
                    vector.add(rs.getString("facilityType"));
                    vector.add(rs.getString("facilityName"));
                    vector.add(rs.getString("address"));
                }
                dft.addRow(vector);

            }

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(EditFacilities.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(EditFacilities.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void updateTableGeneral() {
        try {
            int c;
            Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");
            con = DriverManager.getConnection("jdbc:ucanaccess://C:/Users/david/OneDrive/Documents/CityPlanner.accdb");
            pst = con.prepareStatement("SELECT * FROM General");
            rs = pst.executeQuery();

            ResultSetMetaData rsd = rs.getMetaData();
            c = rsd.getColumnCount();
            DefaultTableModel dft = (DefaultTableModel) tblFacilities.getModel();
            dft.setRowCount(0);

            while (rs.next()) {
                Vector vector = new Vector();
                for (int i = 1; i <= c; i++) {
                    vector.add(rs.getString("ID"));
                    vector.add(rs.getString("facilityType"));
                    vector.add(rs.getString("facilityName"));
                    vector.add(rs.getString("address"));
                }
                dft.addRow(vector);

            }

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(EditFacilities.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(EditFacilities.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditFacilities.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditFacilities.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditFacilities.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditFacilities.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditFacilities().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDeleteUser;
    private javax.swing.JButton btnEditUser;
    private javax.swing.JButton btnView;
    private javax.swing.JComboBox<String> cbxBusinessFaciltyType;
    private javax.swing.JComboBox<String> cbxGeneralFaciltyType;
    private javax.swing.JComboBox<String> cbxJobSeekerFaciltyType;
    private javax.swing.JComboBox<String> cbxSelectFacilities;
    private javax.swing.JComboBox<String> cbxStudentFaciltyType;
    private javax.swing.JComboBox<String> cbxTourismFaciltyType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblFacilities;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtFacilityName;
    private javax.swing.JTextField txtSearchBar;
    // End of variables declaration//GEN-END:variables
}
